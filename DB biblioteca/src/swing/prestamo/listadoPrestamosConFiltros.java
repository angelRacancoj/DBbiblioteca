package swing.prestamo;

import backend.ManejadorDB.estudiantesManejadorDB;
import backend.ManejadorDB.libroManejadorDB;
import backend.ManejadorDB.prestamosManejadorDB;
import backend.prestamos.Prestamo;
import biblioteca.BackEnd.Excepciones.InputsVaciosException;
import java.awt.HeadlessException;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jdesktop.observablecollections.ObservableCollections;
import org.jdesktop.observablecollections.ObservableList;
import run.ValoresPredeterminados;

/**
 *
 * @author angelrg
 */
public class listadoPrestamosConFiltros extends javax.swing.JInternalFrame {

    private prestamosManejadorDB manejadorPrestamos;
    private libroManejadorDB manejadorLibros;
    private estudiantesManejadorDB manejadorEstudiantes;
    private List<Prestamo> listaPrestamo;
    private ObservableList<Prestamo> listaPrestamosObsevable;
    private Prestamo prestamoSeleccionado;
    private DevolverLibro devolverLibro;

    /**
     * Creates new form listadoPrestamosConFiltros
     */
    public listadoPrestamosConFiltros(prestamosManejadorDB manejadorPre, estudiantesManejadorDB manejadorEst, libroManejadorDB manejadorLibro) {
        this.manejadorPrestamos = manejadorPre;
        this.manejadorEstudiantes = manejadorEst;
        this.manejadorLibros = manejadorLibro;
        listaPrestamo = new LinkedList<>();
        listaPrestamosObsevable = ObservableCollections.observableList(listaPrestamo);
        devolverLibro = new DevolverLibro(true, manejadorPre);
        prestamoSeleccionado = new Prestamo();
        initComponents();

        devolverLibroButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        fechaInicialFormattedTextField = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        fechaFinalFormattedTextField = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        carnetEstudianteFormattedTextField = new javax.swing.JFormattedTextField();
        filtrosComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        dineroTextField = new javax.swing.JTextField();
        cargarListaButton = new javax.swing.JButton();
        devolverLibroButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        regresarButton = new javax.swing.JButton();
        limpiarButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        NombreEstTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        carreraTextField = new javax.swing.JTextField();

        jLabel8.setFont(new java.awt.Font("Noto Sans", 0, 10)); // NOI18N
        jLabel8.setText("Ej: 2017-01-01");

        jLabel10.setText("jLabel10");

        setTitle("Reportes de prestamos");

        jLabel1.setText("Fecha inicio:");

        try {
            fechaInicialFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel2.setText("Fecha Final:");

        try {
            fechaFinalFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel3.setText("Carnet del Estudiante:");

        try {
            carnetEstudianteFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        filtrosComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos los Prestamos y Devoluciones", "Prestamos Pendientes", "Libros por entregar hoy", "Libros Prestados con mora", "Ganancias en un intervalo de tiempo", "Carrera con mas prestamos", "Listado moras de un estudiante", "Listado estudiante con mas prestamo" }));
        filtrosComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtrosComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("Dinero recaudado: Q");

        cargarListaButton.setText("Cargar Listado");
        cargarListaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarListaButtonActionPerformed(evt);
            }
        });

        devolverLibroButton.setText("Devolver Libro");
        devolverLibroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devolverLibroButtonActionPerformed(evt);
            }
        });

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${listaPrestamosObsevable}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${no_ID}"));
        columnBinding.setColumnName("No_ ID");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${carnetEstudiante}"));
        columnBinding.setColumnName("Carnet Estudiante");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codigoLibro}"));
        columnBinding.setColumnName("Codigo Libro");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${fechaPrestamo}"));
        columnBinding.setColumnName("Fecha Prestamo");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${fechaDevolucion}"));
        columnBinding.setColumnName("Fecha Devolucion");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${libroDevuelto}"));
        columnBinding.setColumnName("Libro Devuelto");
        columnBinding.setColumnClass(Boolean.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${pagoMoroso}"));
        columnBinding.setColumnName("Pago Moroso");
        columnBinding.setColumnClass(Boolean.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${pagoTotal}"));
        columnBinding.setColumnName("Pago Total");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${prestamoSeleccionado}"), jTable1, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(jTable1);

        regresarButton.setText("Regresar");
        regresarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarButtonActionPerformed(evt);
            }
        });

        limpiarButton.setText("Limpiar");
        limpiarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("*Reportes:");

        jLabel7.setFont(new java.awt.Font("Noto Sans", 0, 10)); // NOI18N
        jLabel7.setText("Ej: 2017-01-01");

        jLabel9.setFont(new java.awt.Font("Noto Sans", 0, 10)); // NOI18N
        jLabel9.setText("Ej: 201601234");

        jLabel11.setText("*Para realizar el pago de un prestamo seleccionar el prestamo en el listado de prestamos pendientes, entregar hoy y prestamos con mora.");

        jLabel12.setFont(new java.awt.Font("Noto Sans", 0, 10)); // NOI18N
        jLabel12.setText("Ej: 2017-01-01");

        jLabel6.setText("Estudiante:");

        jLabel13.setText("Carrera:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(regresarButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(limpiarButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(devolverLibroButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(NombreEstTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(carreraTextField))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(167, 167, 167)
                                                .addComponent(jLabel2))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel7)
                                                    .addComponent(fechaInicialFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(fechaFinalFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel3))
                                            .addComponent(jLabel12))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(carnetEstudianteFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(filtrosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addComponent(jLabel9)))
                                        .addGap(18, 18, 18)
                                        .addComponent(dineroTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(51, 51, 51)
                                        .addComponent(cargarListaButton)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fechaInicialFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(fechaFinalFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(carnetEstudianteFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filtrosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel12)
                    .addComponent(jLabel9))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(NombreEstTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(carreraTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(dineroTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cargarListaButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regresarButton)
                    .addComponent(limpiarButton)
                    .addComponent(devolverLibroButton))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void regresarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarButtonActionPerformed
        limpiar();
        this.setVisible(false);
    }//GEN-LAST:event_regresarButtonActionPerformed

    private void limpiarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarButtonActionPerformed
        limpiar();
    }//GEN-LAST:event_limpiarButtonActionPerformed

    private void cargarListaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarListaButtonActionPerformed
        try {
            switch (filtrosComboBox.getSelectedIndex()) {
                case ValoresPredeterminados.TodoPrestamoYDevolucion:
                    manipularModifcaciones(false, false);
                    busqueda();
                    limpiar();
                    break;

                case ValoresPredeterminados.TodoPrestamoPendientes:
                    manipularModifcaciones(false, false);
                    busqueda();
                    limpiar();
                    limpiarOutPuts();
                    break;

                case ValoresPredeterminados.LibrosPorEntregarHoy:
                    manipularModifcaciones(false, false);
                    busqueda();
                    limpiar();
                    limpiarOutPuts();
                    break;

                case ValoresPredeterminados.LibrosPrestadosConMora:
                    manipularModifcaciones(false, false);
                    busqueda();
                    limpiar();
                    limpiarOutPuts();
                    break;

                case ValoresPredeterminados.GananciasIntervaloTiempo:
                    manipularModifcaciones(false, true);

                    if (manejadorPrestamos.cantidadDelDias(fechaInicialFormattedTextField.getText(), fechaFinalFormattedTextField.getText()) < 0) {
                        JOptionPane.showMessageDialog(this, "No se ha especificado correctamente las fechas", "Error", JOptionPane.ERROR_MESSAGE);
                        limpiar();
                    } else if (fechaInicialFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty() && fechaFinalFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty()) {
                        actualizarBusquedaObservable(manejadorPrestamos.consultasPrestamos(ValoresPredeterminados.GananciasTotales, fechaInicialFormattedTextField.getText(), fechaFinalFormattedTextField.getText(), carnetEstudianteFormattedTextField.getText()));
                        String total = manejadorPrestamos.totalPrestamoIntTiempo(fechaInicialFormattedTextField.getText(), fechaFinalFormattedTextField.getText());
                        System.out.println(total);
                        dineroTextField.setText(total);
                        limpiar();
                    } else if (fechaInicialFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty() || fechaFinalFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty()) {
                        JOptionPane.showMessageDialog(this, "No se ha especificado correctamente las fechas", "Error", JOptionPane.ERROR_MESSAGE);
                        limpiar();
                    } else {
                        busqueda();
                        dineroTextField.setText(manejadorPrestamos.totalPrestamoIntTiempo(fechaInicialFormattedTextField.getText(), fechaFinalFormattedTextField.getText()));
                        limpiar();
                    }

                    break;

                case ValoresPredeterminados.CarreraMasPrestamos:
                    NombreEstTextField.setText("");
                    dineroTextField.setText("");
                    manipularModifcaciones(false, true);

                    if (manejadorPrestamos.cantidadDelDias(fechaInicialFormattedTextField.getText(), fechaFinalFormattedTextField.getText()) < 0) {
                        JOptionPane.showMessageDialog(this, "No se ha especificado correctamente las fechas", "Error", JOptionPane.ERROR_MESSAGE);
                        limpiar();
                    } else if (fechaInicialFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty() && fechaFinalFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty()) {
                        actualizarBusquedaObservable(manejadorPrestamos.consultasPrestamos(ValoresPredeterminados.CarreraMasPrestamosGeneral, fechaInicialFormattedTextField.getText(), fechaFinalFormattedTextField.getText(), carnetEstudianteFormattedTextField.getText()));
                        carreraTextField.setText(manejadorPrestamos.obtenerCarreraConMasRegistrosIntervaloDeTiempo(fechaInicialFormattedTextField.getText(), fechaFinalFormattedTextField.getText()));
                        limpiar();
                    } else if (fechaInicialFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty() || fechaFinalFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty()) {
                        JOptionPane.showMessageDialog(this, "No se ha especificado correctamente las fechas", "Error", JOptionPane.ERROR_MESSAGE);
                        limpiar();
                    } else {
                        busqueda();
                        carreraTextField.setText(manejadorPrestamos.obtenerCarreraConMasRegistrosIntervaloDeTiempo(fechaInicialFormattedTextField.getText(), fechaFinalFormattedTextField.getText()));
                        limpiar();
                    }

                    break;

                case ValoresPredeterminados.ListadoMorasEstudiante:
                    manipularModifcaciones(true, true);
                    if (carnetEstudianteFormattedTextField.getText().replace(" ", "").isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Debe indicar el carnet", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        NombreEstTextField.setText(manejadorEstudiantes.nombreEstudiante(carnetEstudianteFormattedTextField.getText()));
                        casosIfFecha(ValoresPredeterminados.ListadoMorasEstudianteGeneral);
                    }
                    limpiar();
                    dineroTextField.setText("");
                    carreraTextField.setText("");
                    break;

                case ValoresPredeterminados.ListadoEstudianteMasPrestamos:
                    manipularModifcaciones(false, true);
                    casosIfFecha(ValoresPredeterminados.ListadoEstudianteMasPrestamosGeneral);
                    carreraTextField.setText("");
                    dineroTextField.setText("");
                    limpiar();

                    break;

            }
        } catch (SQLException | InputsVaciosException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cargarListaButtonActionPerformed

    private void devolverLibroButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devolverLibroButtonActionPerformed
        devolverLibro.devolucion(prestamoSeleccionado);
    }//GEN-LAST:event_devolverLibroButtonActionPerformed

    private void filtrosComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtrosComboBoxActionPerformed
        switch (filtrosComboBox.getSelectedIndex()) {
            case ValoresPredeterminados.TodoPrestamoYDevolucion:
                manipularModifcaciones(false, false);
                break;
            case ValoresPredeterminados.TodoPrestamoPendientes:
                manipularModifcaciones(false, false);
                break;
            case ValoresPredeterminados.LibrosPorEntregarHoy:
                manipularModifcaciones(false, false);
                break;
            case ValoresPredeterminados.LibrosPrestadosConMora:
                manipularModifcaciones(false, false);
                break;
            case ValoresPredeterminados.GananciasIntervaloTiempo:
                manipularModifcaciones(false, true);
                break;
            case ValoresPredeterminados.CarreraMasPrestamos:
                manipularModifcaciones(false, true);
                break;
            case ValoresPredeterminados.ListadoMorasEstudiante:
                manipularModifcaciones(true, true);
                break;
            case ValoresPredeterminados.ListadoEstudianteMasPrestamos:
                manipularModifcaciones(false, true);
                break;
        }
    }//GEN-LAST:event_filtrosComboBoxActionPerformed

    public void actualizarBusquedaObservable(List<Prestamo> listaLibros) {
        this.listaPrestamosObsevable.clear();
        this.listaPrestamosObsevable.addAll(listaLibros);
    }

    public ObservableList<Prestamo> getListaPrestamosObsevable() {
        return listaPrestamosObsevable;
    }

    public void setListaPrestamosObsevable(ObservableList<Prestamo> listaPrestamosObsevable) {
        this.listaPrestamosObsevable = listaPrestamosObsevable;
    }

    public Prestamo getPrestamoSeleccionado() {
        return prestamoSeleccionado;
    }

    public void setPrestamoSeleccionado(Prestamo prestamoSeleccionado) {
        if (prestamoSeleccionado != null) {
            this.prestamoSeleccionado = prestamoSeleccionado.clone();
            switch (filtrosComboBox.getSelectedIndex()) {
                case ValoresPredeterminados.TodoPrestamoYDevolucion:
                    devolverLibroButton.setEnabled(false);
                    break;
                case ValoresPredeterminados.TodoPrestamoPendientes:
                    devolverLibroButton.setEnabled(true);
                    break;
                case ValoresPredeterminados.LibrosPorEntregarHoy:
                    devolverLibroButton.setEnabled(true);
                    break;
                case ValoresPredeterminados.LibrosPrestadosConMora:
                    devolverLibroButton.setEnabled(true);
                    break;
                case ValoresPredeterminados.GananciasIntervaloTiempo:
                    devolverLibroButton.setEnabled(false);
                    break;
                case ValoresPredeterminados.CarreraMasPrestamos:
                    devolverLibroButton.setEnabled(false);
                    break;
                case ValoresPredeterminados.ListadoMorasEstudiante:
                    devolverLibroButton.setEnabled(false);
                    break;
                case ValoresPredeterminados.ListadoEstudianteMasPrestamos:
                    devolverLibroButton.setEnabled(false);
                    break;
            }
        } else {
            devolverLibroButton.setEnabled(false);
            this.prestamoSeleccionado = null;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NombreEstTextField;
    private javax.swing.JButton cargarListaButton;
    private javax.swing.JFormattedTextField carnetEstudianteFormattedTextField;
    private javax.swing.JTextField carreraTextField;
    private javax.swing.JButton devolverLibroButton;
    private javax.swing.JTextField dineroTextField;
    private javax.swing.JFormattedTextField fechaFinalFormattedTextField;
    private javax.swing.JFormattedTextField fechaInicialFormattedTextField;
    private javax.swing.JComboBox<String> filtrosComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton limpiarButton;
    private javax.swing.JButton regresarButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void limpiar() {
        carnetEstudianteFormattedTextField.setText("");
        fechaFinalFormattedTextField.setText("");
        fechaInicialFormattedTextField.setText("");
    }

    private void limpiarOutPuts() {
        NombreEstTextField.setText("");
        carreraTextField.setText("");
        dineroTextField.setText("");
    }

    private void manipularModifcaciones(boolean carnet, boolean fechas) {
        carnetEstudianteFormattedTextField.setEnabled(carnet);
        fechaFinalFormattedTextField.setEnabled(fechas);
        fechaInicialFormattedTextField.setEnabled(fechas);
    }

    private void busqueda() throws SQLException {
        try {
            actualizarBusquedaObservable(manejadorPrestamos.consultasPrestamos(filtrosComboBox.getSelectedIndex(), fechaInicialFormattedTextField.getText(), fechaFinalFormattedTextField.getText(), carnetEstudianteFormattedTextField.getText()));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void casosIfFecha(int opcion) {
        try {
            if (manejadorPrestamos.cantidadDelDias(fechaInicialFormattedTextField.getText(), fechaFinalFormattedTextField.getText()) < 0) {
                JOptionPane.showMessageDialog(this, "No se ha especificado correctamente las fechas", "Error", JOptionPane.ERROR_MESSAGE);
                limpiar();
            } else if (fechaInicialFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty() && fechaFinalFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty()) {
                actualizarBusquedaObservable(manejadorPrestamos.consultasPrestamos(opcion, fechaInicialFormattedTextField.getText(), fechaFinalFormattedTextField.getText(), carnetEstudianteFormattedTextField.getText()));
                limpiar();
            } else if (fechaInicialFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty() || fechaFinalFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se ha especificado correctamente las fechas", "Error", JOptionPane.ERROR_MESSAGE);
                limpiar();
            } else {
                busqueda();
                limpiar();
            }
        } catch (InputsVaciosException | HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void Nombre(String nombre) {
        NombreEstTextField.setText(nombre);
    }

    public void Carrera(String carrera) {
        carreraTextField.setText(carrera);
    }
}
